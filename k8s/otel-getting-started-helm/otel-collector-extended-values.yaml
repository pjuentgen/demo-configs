mode: daemonset
extraEnvs:
  - name: K8S_CLUSTER_NAME
    value: CLUSTER_NAME
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
presets:
  hostMetrics:
    enabled: true
  kubeletMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
  kubernetesEvents:
    enabled: true    
clusterRole:
  create: true
  name: "opentelemetry-collector-admin"
  rules:
  - verbs: ["*"]
    resources: ["*"]
    apiGroups: ["*"]
  - verbs: ["*"]
    nonResourceURLs: ["*"]
  clusterRoleBinding:
    name: "opentelemetry-collector-admin"
serviceAccount:
  create: true
  name: "opentelemetry-collector-admin"
config:
  receivers:
    kubeletstats:
      collection_interval: 10s
      auth_type: "serviceAccount"
      endpoint: https://${env:K8S_NODE_NAME}:10250
      insecure_skip_verify: true
      metric_groups:
      - container
      - pod
      - volume
      - node      
      extra_metadata_labels:
        - container.id  
    k8s_cluster:
      collection_interval: 10s
      node_conditions_to_report: [Ready, MemoryPressure,DiskPressure,NetworkUnavailable]
      allocatable_types_to_report: [cpu, memory, storage, ephemeral-storage]
    k8s_events:
      auth_type : "serviceAccount"   
    otlp:
      protocols:
        grpc:
          endpoint: 127.0.0.1:4317
          max_recv_msg_size_mib: 4
        http:
          endpoint: 127.0.0.1:4318
    jaeger: null
    zipkin: null
    prometheus:
      config:
        scrape_configs:
          - job_name: "prometheus"
            scrape_interval: 10s
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels:
                  [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                regex: "true"
                action: keep
              - source_labels:
                  [
                    __address__,
                    __meta_kubernetes_pod_annotation_prometheus_io_port,
                  ]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $$1:$$2
          - job_name: "otel-collector"
            scrape_interval: 10s
            static_configs:
              - targets: ["127.0.0.1:8888"]
          # Scrape cAdvisor metrics
          - job_name: integrations/kubernetes/cadvisor
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
                - role: node
            relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
            scheme: https
            tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes
          - job_name: integrations/kubernetes/kubelet
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
                - role: node
            relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
            scheme: https
            tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes
          # Scrape config for API servers
          - job_name: "kubernetes-apiservers"
            kubernetes_sd_configs:
              - role: endpoints
                namespaces:
                  names:
                    - default
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: kubernetes;https
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: Namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: Service
  processors:
    resourcedetection/system:
      detectors: [env, system, gcp, eks]
      timeout: 2s
      override: false  
    attributes/metrics:
      actions:
        - action: insert
          key: env.name
          value: ENV_NAME
        - action: insert
          key: cluster
          value: CLUSTER_NAME                     
    resource:
      attributes:
        - action: insert
          key: env.name
          value: ENV_NAME
        - action: insert
          key: cluster
          value: CLUSTER_NAME
    batch:
      send_batch_size: 10000
      timeout: 200ms
    memory_limiter:
      check_interval: 3s
      limit_mib: 1500
      spike_limit_mib: 500
    k8sattributes:
      auth_type: "serviceAccount"
      passthrough: true
      filter:
        node_from_env_var: K8S_NODE_NAME
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.container.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
  exporters:
    prometheusremotewrite:
      endpoint: PROMETHEUS_ENDPOINT
      timeout: 20s
      headers:
        "X-Scope-OrgID": common
extensions:
    health_check: {}
    memory_ballast:
      size_mib: 683
service:
    extensions: [memory_ballast, health_check]
    telemetry:
      metrics:
        address: 127.0.0.1:8888
      logs:
        encoding: json
    pipelines:
      metrics:
        exporters:
          - prometheusremotewrite
        processors:
          - attributes/metrics 
          - memory_limiter
          - k8sattributes
          - resource
          - batch
        receivers:
          - otlp
          - prometheus
          - k8s_cluster
          - kubeletstats
      traces: null
      logs: null